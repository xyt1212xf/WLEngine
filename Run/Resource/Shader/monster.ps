////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////


/////////////
// GLOBALS //
/////////////
Texture2D shaderTexture  : register(t0);
SamplerState SampleType;

cbuffer diffuseBuffer  : register(b0)
{
    float4 diffuseColor;
};

cbuffer ambientBuffer  : register(b1)
{
    float4 ambientColor;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};


////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 DiffusePixelShader(PixelInputType input) : SV_TARGET
{

	float4 textureColor;
	float3 lightDir = normalize(float3(0, 100, -1000));
	float lightIntensity;
	float4 color;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTexture.Sample(SampleType, input.tex);
	//return textureColor;
	// Invert the light direction for calculations.

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(normalize(input.normal), lightDir));

    // Determine the final amount of diffuse color based on the diffuse color combined with the light intensity.
    color = saturate(diffuseColor * lightIntensity);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color = ambientColor + color * textureColor;

    return color;
}
